/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ritvikc.tool.config;

import com.ritvikc.tool.config.model.Config;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.FlowLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.*;
import javafx.scene.paint.Color;
import javax.swing.*;
import javax.swing.table.*;
import org.oxbow.swingbits.table.filter.TableRowFilterSupport;

/**
 *
 * @author ritvikc
 */
public class Launcher extends javax.swing.JFrame {

    private static File directory = new File(System.getProperty("user.home"));
    private static String version = "1.2";
    /**
     * Creates new form Launcher
     */
    public Launcher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vMap = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        vFile1 = new javax.swing.JTextField();
        vMatching = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        vFile2 = new javax.swing.JTextField();
        vConflict = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        vMatchingMenu = new javax.swing.JCheckBoxMenuItem();
        vConflictMenu = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Smart Config Compare Tool (Designed and Developed by MFS Devops Team)");
        setMaximumSize(new java.awt.Dimension(1600, 1200));
        setMinimumSize(new java.awt.Dimension(800, 600));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 50)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 121));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ritvikc/tool/config/icon/icon.png"))); // NOI18N
        jLabel1.setText("  Smart Config Compare");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        vMap.setAutoCreateRowSorter(true);
        vMap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Config Name", "Config File 1 Value", "Config File 2 Value", "Values Matching ?", "Having Conflict ?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vMap.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(vMap);

        jPanel1.setAlignmentX(Component.CENTER_ALIGNMENT);

        vMatching.setSelected(true);
        vMatching.setText("Display Matching Values?");
        vMatching.setToolTipText("Do you want to display the values which are also matching?");
        vMatching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vMatchingActionPerformed(evt);
            }
        });

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Config File 1 :");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Compare");
        jButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        vConflict.setText("Display Only Confilct?");
        vConflict.setToolTipText("Here conflict menas: both file are haing diffrent value other than empty value.");
        vConflict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vConflictActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Config File 2 :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vFile1)
                    .addComponent(vFile2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vConflict, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(vFile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(vMatching))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(vFile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(vConflict))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open File 1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Open File 2");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Compare");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Setings");

        vMatchingMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        vMatchingMenu.setSelected(true);
        vMatchingMenu.setText("Display Matching Values");
        vMatchingMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vMatchingMenuActionPerformed(evt);
            }
        });
        jMenu2.add(vMatchingMenu);

        vConflictMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        vConflictMenu.setText("Display Only Conflict");
        vConflictMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vConflictMenuActionPerformed(evt);
            }
        });
        jMenu2.add(vConflictMenu);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("About");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        fileSelection(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        fileSelection(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel m = (DefaultTableModel) vMap.getModel();
        int row_count = m.getRowCount();
        for(int i=0; i<row_count; i++) m.removeRow(0);
        
        File f1 = new File(vFile1.getText());
        File f2 = new File(vFile2.getText());
        
        JTableHeader th = vMap.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn h1 = tcm.getColumn(1);
        TableColumn h2 = tcm.getColumn(2);
        
        if(f1.exists() && f2.exists()){
            try {
                h1.setHeaderValue(f1.getName()+" (File 1)");
                h2.setHeaderValue(f2.getName()+" (File 2)");
                Config.init();
                
                processFile(f1,true);
                processFile(f2,false);
                
                Config.getKeys().stream().map((key) -> Config.getConfig(key)).forEachOrdered((values) -> {
                    boolean matching=false;
                    if(values[3].contains("YES")){
                        matching=true;
                    }
                    
                    boolean conflict=false;
                    if(values[4].contains("YES")){
                        conflict=true;
                    }
                    
                    if(vMatching.isSelected()){
                        m.addRow(values);
                    }
                    else if(!matching){
                        if(vConflict.isSelected() && conflict){
                            m.addRow(values);
                        }
                        else if(!vConflict.isSelected()){
                            m.addRow(values);
                        }
                    }
                });
            } catch (IOException ex) {
                Logger.getLogger(Launcher.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            h1.setHeaderValue("Config File 1 Value");
            h2.setHeaderValue("Config File 2 Value");
            JOptionPane.showMessageDialog(Launcher.this, "Please check input files for comapre tool", "Invalid Files", JOptionPane.ERROR_MESSAGE);
        }
        th.repaint();
        try{
            //TableRowFilterSupport.forTable(new JXTableFilter(vMap)).searchable(true).apply();
            TableRowFilterSupport.forTable(vMap).searchable(true).apply();
        }
        catch(Exception ex){
            Logger.getLogger(Launcher.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:        
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        
        JLabel toolName = new JLabel("<html><body><div align=\"center\"><h1>Smart Config Compare v"+version+"</h1><br/><h5>A Smart Tool for Comparing EqualTo Seperated Config Files</h5></div></body></html>");
        toolName.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JLabel ico = new JLabel(new ImageIcon(getClass().getResource("/com/ritvikc/tool/config/icon/icon.png")));
        ico.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JButton team = new JButton("<html><body><div align=\"center\"><br/>:: Designed &amp; Developed by ::<hr/><h3>MFS Devops Team</h3></div></body></html>");
        
        team.setBorder(null);
        team.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    Desktop.getDesktop().mail(new URI("mailto:Contact.Ritvik@Gmail.com"));
                    Desktop.getDesktop().browse(new URI("sip:Contact.Ritvik@Gmail.com"));
                } catch (URISyntaxException | IOException ex) {
                    Logger.getLogger(Launcher.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        team.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.setBackground(new java.awt.Color(240, 240, 240));
        panel.add(toolName);
        panel.add(new JLabel("<html><body>&nbsp;<br/>&nbsp;</body></html>"));
        panel.add(ico);
        panel.add(new JLabel("<html><body>&nbsp;<br/>&nbsp;</body></html>"));
        panel.add(team);
        panel.add(new JLabel("<html><body>&nbsp;<br/>&nbsp;</body></html>"));
        JOptionPane.showMessageDialog(Launcher.this, panel, "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void vConflictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vConflictActionPerformed
        // TODO add your handling code here:
        Boolean x = vConflict.isSelected();
        vConflictMenu.setSelected(x);
        if(x){
            vMatching.setSelected(!x);
            vMatchingMenu.setSelected(!x);
        }
    }//GEN-LAST:event_vConflictActionPerformed

    private void vMatchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vMatchingActionPerformed
        // TODO add your handling code here:
        Boolean x = vMatching.isSelected();
        vMatchingMenu.setSelected(x);
        if(x){
            vConflict.setSelected(false);
            vConflictMenu.setSelected(false);
        }
    }//GEN-LAST:event_vMatchingActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        jLabel1MouseClicked(evt);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        fileSelection(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        fileSelection(false);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        jButton3ActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void vMatchingMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vMatchingMenuActionPerformed
        // TODO add your handling code here:
        Boolean x = vMatchingMenu.isSelected();
        vMatching.setSelected(x);
        if(x){
            vConflict.setSelected(false);
            vConflictMenu.setSelected(false);
        }
    }//GEN-LAST:event_vMatchingMenuActionPerformed

    private void vConflictMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vConflictMenuActionPerformed
        // TODO add your handling code here:
        Boolean x = vConflictMenu.isSelected();
        vConflict.setSelected(x);
        if(x){
            vMatching.setSelected(!x);
            vMatchingMenu.setSelected(!x);
        }
    }//GEN-LAST:event_vConflictMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Launcher().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JCheckBox vConflict;
    private javax.swing.JCheckBoxMenuItem vConflictMenu;
    private javax.swing.JTextField vFile1;
    private javax.swing.JTextField vFile2;
    private javax.swing.JTable vMap;
    private javax.swing.JCheckBox vMatching;
    private javax.swing.JCheckBoxMenuItem vMatchingMenu;
    // End of variables declaration//GEN-END:variables

    private void fileSelection(boolean isFirst) {
        JFileChooser j = new JFileChooser(directory);
        j.showOpenDialog(Launcher.this);
        File f = j.getSelectedFile();
        if(f!=null){
            directory= j.getCurrentDirectory();
            if(isFirst){
                vFile1.setText(j.getSelectedFile().getAbsolutePath());
            }
            else{
                vFile2.setText(j.getSelectedFile().getAbsolutePath());
            }
        }
    }

    private void processFile(File cnf, boolean isFirst) throws FileNotFoundException, IOException {
        BufferedReader r = new BufferedReader(new FileReader(cnf));
        String line = r.readLine();
        while(line!=null){
            //remove starting white spaces
            line= line.replaceAll("^\\s+", "");
            
            //we will not process comment stating with # and empty lines
            if((!line.startsWith("#")) && (line.length()>0)){
                //checking if there is key value pair
                int indexofEqualto = line.indexOf('=');
                if(indexofEqualto!=-1){
                    String key = line.substring(0, indexofEqualto);
                    String value = line.substring(indexofEqualto+1);
                    Config.setConfig(key, value, isFirst);
                }
            }
            
            line = r.readLine();
        }
        
        r.close();
    }
}
